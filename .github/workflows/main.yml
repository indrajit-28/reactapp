name: Frontend Deployment

on:
  push:
    branches:
      - master

jobs:
  frontend:
    runs-on: [self-hosted, react]  # Ensure your runner is labeled 'react'

    steps:
      # Stage 1: Set up SSH and Node.js
      - name: Set up SSH key for GitHub Actions
        run: |
          if [ ! -d "$HOME/.ssh" ]; then mkdir -p ~/.ssh; fi
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa1
          sudo chown -R $USER:$USER ~/.ssh
          sudo chmod 600 ~/.ssh/id_rsa1
          sudo chmod 700 ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          node -v

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Stage 2: Install dependencies (without building)
      - name: Install dependencies
        working-directory: /var/www/reactapp/client
        run: |
          echo "Pulling latest code and installing dependencies"
          git pull origin master  # Ensure latest code
          npm install --force  # Install dependencies, but skip building

      # Stage 3: Build the frontend in a temporary directory
      - name: Build frontend in a temporary directory
        working-directory: /var/www/reactapp/client
        run: |
          TEMP_BUILD_DIR="/var/www/html/temp_build"
          echo "Building frontend in a temporary directory"
          mkdir -p $TEMP_BUILD_DIR
          npm run build --output-path=$TEMP_BUILD_DIR  # Build to the temp directory
          ls $TEMP_BUILD_DIR  # Optional: list the files in the temp build directory

      # Stage 4: Move the built project to the live directory
      - name: Move build to live directory
        run: |
          LIVE_BUILD_DIR="/var/www/reactapp/client/build"
          TEMP_BUILD_DIR="/var/www/html/temp_build"

          echo "Switching the build to the live directory atomically"
          if [ -d "$TEMP_BUILD_DIR" ]; then
            # Atomic move: Rename the temp directory to the live build directory
            mv $TEMP_BUILD_DIR $LIVE_BUILD_DIR
            sudo chown -R www-data:www-data $LIVE_BUILD_DIR
            sudo chmod -R 755 $LIVE_BUILD_DIR
            echo "Deployment complete! The new build is now live."
          else
            echo "No build found in temp directory, skipping live deployment."
          fi
